/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package wifi_rgb;

import java.io.BufferedWriter;
import java.io.IOException;
import java.io.OutputStreamWriter;
import java.net.Socket;
import java.net.UnknownHostException;
import javax.swing.colorchooser.AbstractColorChooserPanel;
import javax.swing.event.ChangeEvent;
import org.json.simple.JSONObject;

/**
 *
 * @author saliya
 */
public class wifiNeoPixel extends javax.swing.JFrame {

    private BufferedWriter WIFI_BUFFERED_WRITER;
    private Socket WIFI_SOCKET;
    private String WIFI_IP = "";
    private String WIFI_PORT = "";
    private Thread WIFI_CONNECT_THREAD;
    private int R = 0;
    private int G = 0;
    private int B = 0;
    private JSONObject obj = new JSONObject();

    /**
     * Creates new form wifiNeoPixel
     */
    public wifiNeoPixel() {
        initComponents();
        AbstractColorChooserPanel[] panels = jColorChooser1.getChooserPanels();
        for (AbstractColorChooserPanel p : panels) {
            String displayName = p.getDisplayName();
            switch (displayName) {
                case "HSV":
                    jColorChooser1.removeChooserPanel(p);
                    break;
                case "HSL":
                    jColorChooser1.removeChooserPanel(p);
                    break;
                case "CMYK":
                    jColorChooser1.removeChooserPanel(p);
                    break;
            }
        }

        jColorChooser1.getSelectionModel().addChangeListener((ChangeEvent ce) -> {
            R = jColorChooser1.getColor().getRed();
            G = jColorChooser1.getColor().getGreen();
            B = jColorChooser1.getColor().getBlue();
            try {
                obj.put("R", R);
                obj.put("G", G);
                obj.put("B", B);
                SendData(obj);
            } catch (Exception e) {
                e.printStackTrace();
            }
        });
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel4 = new javax.swing.JLabel();
        WIFI_IP_TXF = new javax.swing.JTextField();
        WIFI_PORT_TXF = new javax.swing.JTextField();
        WIFI_CONNECT_BTN = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jColorChooser1 = new javax.swing.JColorChooser();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("WiFi Neo Pixel");

        jLabel4.setText("IP Address :");

        WIFI_IP_TXF.setText("192.168.166.104");

        WIFI_PORT_TXF.setText("80");

        WIFI_CONNECT_BTN.setText("Connect");
        WIFI_CONNECT_BTN.setFocusPainted(false);
        WIFI_CONNECT_BTN.setFocusable(false);
        WIFI_CONNECT_BTN.setRequestFocusEnabled(false);
        WIFI_CONNECT_BTN.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                WIFI_CONNECT_BTNActionPerformed(evt);
            }
        });

        jLabel1.setText("::");

        jColorChooser1.setBackground(new java.awt.Color(255, 255, 255));
        jColorChooser1.addHierarchyListener(new java.awt.event.HierarchyListener() {
            public void hierarchyChanged(java.awt.event.HierarchyEvent evt) {
                jColorChooser1HierarchyChanged(evt);
            }
        });
        jColorChooser1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jColorChooser1MouseClicked(evt);
            }
            public void mousePressed(java.awt.event.MouseEvent evt) {
                jColorChooser1MousePressed(evt);
            }
        });
        jColorChooser1.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                jColorChooser1PropertyChange(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel4)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(WIFI_IP_TXF, javax.swing.GroupLayout.PREFERRED_SIZE, 133, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(WIFI_PORT_TXF, javax.swing.GroupLayout.PREFERRED_SIZE, 79, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(22, 22, 22)
                        .addComponent(WIFI_CONNECT_BTN, javax.swing.GroupLayout.PREFERRED_SIZE, 94, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jColorChooser1, javax.swing.GroupLayout.PREFERRED_SIZE, 437, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(WIFI_PORT_TXF, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(WIFI_CONNECT_BTN)
                    .addComponent(WIFI_IP_TXF)
                    .addComponent(jLabel4))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jColorChooser1, javax.swing.GroupLayout.PREFERRED_SIZE, 253, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jLabel1)
                .addContainerGap())
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void WIFI_CONNECT_BTNActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_WIFI_CONNECT_BTNActionPerformed
        if (WIFI_IP_TXF.getText().isEmpty() || WIFI_PORT_TXF.getText().isEmpty()) {
            return;
        }
        WIFI_CONNECT_BTN.setEnabled(false);
        WIFI_IP_TXF.setRequestFocusEnabled(false);
        WIFI_PORT_TXF.setRequestFocusEnabled(false);
        WIFI_CONNECT_THREAD = new Thread(() -> {
            if (WIFI_isConnected()) {
                WIFI_closeConnecition();
                WIFI_SOCKET = null;
                WIFI_CONNECT_BTN.setText("Connect");
                WIFI_CONNECT_BTN.setEnabled(true);
                WIFI_IP_TXF.setEnabled(true);
                WIFI_PORT_TXF.setEnabled(true);
                WIFI_IP_TXF.setRequestFocusEnabled(true);
                WIFI_PORT_TXF.setRequestFocusEnabled(true);
                return;
            }
            WIFI_IP = WIFI_IP_TXF.getText();
            WIFI_PORT = WIFI_PORT_TXF.getText();
            try {
                WIFI_SOCKET = new Socket(WIFI_IP, Integer.valueOf(WIFI_PORT));
                jLabel1.setText("connected to :" + WIFI_IP + "  " + WIFI_PORT);
                WIFI_CONNECT_BTN.setText("Disconnect");
                WIFI_CONNECT_BTN.setEnabled(true);
                WIFI_IP_TXF.setEnabled(false);
                WIFI_PORT_TXF.setEnabled(false);
                WIFI_IP_TXF.setRequestFocusEnabled(false);
                WIFI_PORT_TXF.setRequestFocusEnabled(false);
            } catch (UnknownHostException e1) {
                WIFI_CONNECT_BTN.setEnabled(true);
                WIFI_IP_TXF.setEnabled(true);
                WIFI_PORT_TXF.setEnabled(true);
                WIFI_IP_TXF.setRequestFocusEnabled(true);
                WIFI_PORT_TXF.setRequestFocusEnabled(true);
            } catch (IOException e1) {
                WIFI_CONNECT_BTN.setEnabled(true);
                WIFI_IP_TXF.setEnabled(true);
                WIFI_PORT_TXF.setEnabled(true);
                WIFI_IP_TXF.setRequestFocusEnabled(true);
                WIFI_PORT_TXF.setRequestFocusEnabled(true);
            }
        });
        WIFI_CONNECT_THREAD.start();
    }//GEN-LAST:event_WIFI_CONNECT_BTNActionPerformed

    private void jColorChooser1HierarchyChanged(java.awt.event.HierarchyEvent evt) {//GEN-FIRST:event_jColorChooser1HierarchyChanged

    }//GEN-LAST:event_jColorChooser1HierarchyChanged

    private void jColorChooser1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jColorChooser1MouseClicked

    }//GEN-LAST:event_jColorChooser1MouseClicked

    private void jColorChooser1MousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jColorChooser1MousePressed

    }//GEN-LAST:event_jColorChooser1MousePressed

    private void jColorChooser1PropertyChange(java.beans.PropertyChangeEvent evt) {//GEN-FIRST:event_jColorChooser1PropertyChange

    }//GEN-LAST:event_jColorChooser1PropertyChange

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(wifiNeoPixel.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(wifiNeoPixel.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(wifiNeoPixel.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(wifiNeoPixel.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new wifiNeoPixel().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton WIFI_CONNECT_BTN;
    private javax.swing.JTextField WIFI_IP_TXF;
    private javax.swing.JTextField WIFI_PORT_TXF;
    private javax.swing.JColorChooser jColorChooser1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel4;
    // End of variables declaration//GEN-END:variables

    private void WIFI_closeConnecition() {
        if (WIFI_SOCKET != null) {
            if (WIFI_SOCKET.isConnected()) {
                try {
                    WIFI_SOCKET.close();
                    WIFI_SOCKET = null;
                    jLabel1.setText("::");
                } catch (IOException e1) {
                    e1.printStackTrace();
                }
            }
        }
    }

    private boolean WIFI_isConnected() {
        if (WIFI_SOCKET != null) {
            if (WIFI_SOCKET.isConnected()) {
                return true;
            }
        }
        return false;
    }

    private void SendData(Object x) throws Exception {
        if (x == null) {
            return;
        }
        if (WIFI_SOCKET == null) {
            return;
        }
        try {
            WIFI_BUFFERED_WRITER = new BufferedWriter(new OutputStreamWriter(WIFI_SOCKET.getOutputStream()));
            WIFI_BUFFERED_WRITER.write(x + "\n");
            WIFI_BUFFERED_WRITER.flush();
        } catch (IOException e1) {
            e1.printStackTrace();
        }
    }
}
